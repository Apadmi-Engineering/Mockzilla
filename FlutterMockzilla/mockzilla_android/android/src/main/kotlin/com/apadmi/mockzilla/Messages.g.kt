// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class BridgeHttpMethod(val raw: Int) {
  GET(0),
  HEAD(1),
  POST(2),
  PUT(3),
  DELETE(4),
  OPTIONS(5),
  PATCH(6);

  companion object {
    fun ofRaw(raw: Int): BridgeHttpMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BridgeLogLevel(val raw: Int) {
  DEBUG(0),
  ERROR(1),
  INFO(2),
  VERBOSE(3),
  WARN(4),
  ASSERTION(5);

  companion object {
    fun ofRaw(raw: Int): BridgeLogLevel? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeMockzillaHttpRequest (
  val uri: String,
  val headers: Map<String?, String?>,
  val body: String,
  val method: BridgeHttpMethod

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeMockzillaHttpRequest {
      val uri = list[0] as String
      val headers = list[1] as Map<String?, String?>
      val body = list[2] as String
      val method = BridgeHttpMethod.ofRaw(list[3] as Int)!!
      return BridgeMockzillaHttpRequest(uri, headers, body, method)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      uri,
      headers,
      body,
      method.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeMockzillaHttpResponse (
  val statusCode: Long,
  val headers: Map<String?, String?>,
  val body: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeMockzillaHttpResponse {
      val statusCode = list[0].let { if (it is Int) it.toLong() else it as Long }
      val headers = list[1] as Map<String?, String?>
      val body = list[2] as String
      return BridgeMockzillaHttpResponse(statusCode, headers, body)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      statusCode,
      headers,
      body,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeEndpointConfig (
  val name: String,
  val key: String,
  val failureProbability: Long,
  val delayMean: Long,
  val delayVariance: Long,
  val webApiDefaultResponse: BridgeMockzillaHttpResponse? = null,
  val webApiErrorResponse: BridgeMockzillaHttpResponse? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeEndpointConfig {
      val name = list[0] as String
      val key = list[1] as String
      val failureProbability = list[2].let { if (it is Int) it.toLong() else it as Long }
      val delayMean = list[3].let { if (it is Int) it.toLong() else it as Long }
      val delayVariance = list[4].let { if (it is Int) it.toLong() else it as Long }
      val webApiDefaultResponse: BridgeMockzillaHttpResponse? = (list[5] as List<Any?>?)?.let {
        BridgeMockzillaHttpResponse.fromList(it)
      }
      val webApiErrorResponse: BridgeMockzillaHttpResponse? = (list[6] as List<Any?>?)?.let {
        BridgeMockzillaHttpResponse.fromList(it)
      }
      return BridgeEndpointConfig(name, key, failureProbability, delayMean, delayVariance, webApiDefaultResponse, webApiErrorResponse)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      key,
      failureProbability,
      delayMean,
      delayVariance,
      webApiDefaultResponse?.toList(),
      webApiErrorResponse?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeReleaseModeConfig (
  val rateLimit: Long,
  val rateLimitRefillPeriodMillis: Long,
  val tokenLifeSpanMillis: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeReleaseModeConfig {
      val rateLimit = list[0].let { if (it is Int) it.toLong() else it as Long }
      val rateLimitRefillPeriodMillis = list[1].let { if (it is Int) it.toLong() else it as Long }
      val tokenLifeSpanMillis = list[2].let { if (it is Int) it.toLong() else it as Long }
      return BridgeReleaseModeConfig(rateLimit, rateLimitRefillPeriodMillis, tokenLifeSpanMillis)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      rateLimit,
      rateLimitRefillPeriodMillis,
      tokenLifeSpanMillis,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeMockzillaConfig (
  val port: Long,
  val endpoints: List<BridgeEndpointConfig?>,
  val isRelease: Boolean,
  val localHostOnly: Boolean,
  val logLevel: BridgeLogLevel,
  val releaseModeConfig: BridgeReleaseModeConfig

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeMockzillaConfig {
      val port = list[0].let { if (it is Int) it.toLong() else it as Long }
      val endpoints = list[1] as List<BridgeEndpointConfig?>
      val isRelease = list[2] as Boolean
      val localHostOnly = list[3] as Boolean
      val logLevel = BridgeLogLevel.ofRaw(list[4] as Int)!!
      val releaseModeConfig = BridgeReleaseModeConfig.fromList(list[5] as List<Any?>)
      return BridgeMockzillaConfig(port, endpoints, isRelease, localHostOnly, logLevel, releaseModeConfig)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      port,
      endpoints,
      isRelease,
      localHostOnly,
      logLevel.raw,
      releaseModeConfig.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeMockzillaRuntimeParams (
  val config: BridgeMockzillaConfig,
  val mockBaseUrl: String,
  val apiBaseUrl: String,
  val port: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeMockzillaRuntimeParams {
      val config = BridgeMockzillaConfig.fromList(list[0] as List<Any?>)
      val mockBaseUrl = list[1] as String
      val apiBaseUrl = list[2] as String
      val port = list[3].let { if (it is Int) it.toLong() else it as Long }
      return BridgeMockzillaRuntimeParams(config, mockBaseUrl, apiBaseUrl, port)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      config.toList(),
      mockBaseUrl,
      apiBaseUrl,
      port,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BridgeAuthHeader (
  val key: String,
  val value: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BridgeAuthHeader {
      val key = list[0] as String
      val value = list[1] as String
      return BridgeAuthHeader(key, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      value,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object MockzillaHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeEndpointConfig.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeMockzillaConfig.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeMockzillaHttpResponse.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeMockzillaRuntimeParams.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeReleaseModeConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BridgeEndpointConfig -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is BridgeMockzillaConfig -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is BridgeMockzillaHttpResponse -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is BridgeMockzillaRuntimeParams -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is BridgeReleaseModeConfig -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MockzillaHostApi {
  fun startServer(config: BridgeMockzillaConfig): BridgeMockzillaRuntimeParams
  fun stopServer()

  companion object {
    /** The codec used by MockzillaHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MockzillaHostApiCodec
    }
    /** Sets up an instance of `MockzillaHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MockzillaHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaHostApi.startServer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as BridgeMockzillaConfig
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.startServer(configArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaHostApi.stopServer", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopServer()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MockzillaFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeAuthHeader.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeMockzillaHttpRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BridgeMockzillaHttpResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BridgeAuthHeader -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is BridgeMockzillaHttpRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is BridgeMockzillaHttpResponse -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MockzillaFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MockzillaFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MockzillaFlutterApiCodec
    }
  }
  fun endpointMatcher(requestArg: BridgeMockzillaHttpRequest, keyArg: String, callback: (Result<Boolean>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaFlutterApi.endpointMatcher", codec)
    channel.send(listOf(requestArg, keyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")));
        } else {
          val output = it[0] as Boolean
          callback(Result.success(output));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
  fun defaultHandler(requestArg: BridgeMockzillaHttpRequest, keyArg: String, callback: (Result<BridgeMockzillaHttpResponse>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaFlutterApi.defaultHandler", codec)
    channel.send(listOf(requestArg, keyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")));
        } else {
          val output = it[0] as BridgeMockzillaHttpResponse
          callback(Result.success(output));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
  fun errorHandler(requestArg: BridgeMockzillaHttpRequest, keyArg: String, callback: (Result<BridgeMockzillaHttpResponse>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaFlutterApi.errorHandler", codec)
    channel.send(listOf(requestArg, keyArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")));
        } else {
          val output = it[0] as BridgeMockzillaHttpResponse
          callback(Result.success(output));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
  fun generateAuthHeader(callback: (Result<BridgeAuthHeader>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaFlutterApi.generateAuthHeader", codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")));
        } else {
          val output = it[0] as BridgeAuthHeader
          callback(Result.success(output));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
  fun log(logLevelArg: BridgeLogLevel, messageArg: String, tagArg: String, exceptionArg: String?, callback: (Result<Unit>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mockzilla_android.MockzillaFlutterApi.log", codec)
    channel.send(listOf(logLevelArg.raw, messageArg, tagArg, exceptionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else {
          callback(Result.success(Unit));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
}
