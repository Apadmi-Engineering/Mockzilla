// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BridgeHttpMethod: Int {
  case get = 0
  case head = 1
  case post = 2
  case put = 3
  case delete = 4
  case options = 5
  case patch = 6
}

enum BridgeLogLevel: Int {
  case debug = 0
  case error = 1
  case info = 2
  case verbose = 3
  case warn = 4
  case assertion = 5
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeMockzillaHttpRequest {
  var uri: String
  var headers: [String: String]
  var body: String
  var method: BridgeHttpMethod



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeMockzillaHttpRequest? {
    let uri = pigeonVar_list[0] as! String
    let headers = pigeonVar_list[1] as! [String: String]
    let body = pigeonVar_list[2] as! String
    let method = pigeonVar_list[3] as! BridgeHttpMethod

    return BridgeMockzillaHttpRequest(
      uri: uri,
      headers: headers,
      body: body,
      method: method
    )
  }
  func toList() -> [Any?] {
    return [
      uri,
      headers,
      body,
      method,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeMockzillaHttpResponse {
  var statusCode: Int64
  var headers: [String: String]
  var body: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeMockzillaHttpResponse? {
    let statusCode = pigeonVar_list[0] as! Int64
    let headers = pigeonVar_list[1] as! [String: String]
    let body = pigeonVar_list[2] as! String

    return BridgeMockzillaHttpResponse(
      statusCode: statusCode,
      headers: headers,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      statusCode,
      headers,
      body,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeDashboardOverridePreset {
  var name: String
  var description: String? = nil
  var response: BridgeMockzillaHttpResponse



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeDashboardOverridePreset? {
    let name = pigeonVar_list[0] as! String
    let description: String? = nilOrValue(pigeonVar_list[1])
    let response = pigeonVar_list[2] as! BridgeMockzillaHttpResponse

    return BridgeDashboardOverridePreset(
      name: name,
      description: description,
      response: response
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      description,
      response,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeDashboardOptionsConfig {
  var successPresets: [BridgeDashboardOverridePreset]
  var errorPresets: [BridgeDashboardOverridePreset]



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeDashboardOptionsConfig? {
    let successPresets = pigeonVar_list[0] as! [BridgeDashboardOverridePreset]
    let errorPresets = pigeonVar_list[1] as! [BridgeDashboardOverridePreset]

    return BridgeDashboardOptionsConfig(
      successPresets: successPresets,
      errorPresets: errorPresets
    )
  }
  func toList() -> [Any?] {
    return [
      successPresets,
      errorPresets,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeEndpointConfig {
  var name: String
  var key: String
  var shouldFail: Bool
  var delayMs: Int64
  var versionCode: Int64
  var config: BridgeDashboardOptionsConfig



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeEndpointConfig? {
    let name = pigeonVar_list[0] as! String
    let key = pigeonVar_list[1] as! String
    let shouldFail = pigeonVar_list[2] as! Bool
    let delayMs = pigeonVar_list[3] as! Int64
    let versionCode = pigeonVar_list[4] as! Int64
    let config = pigeonVar_list[5] as! BridgeDashboardOptionsConfig

    return BridgeEndpointConfig(
      name: name,
      key: key,
      shouldFail: shouldFail,
      delayMs: delayMs,
      versionCode: versionCode,
      config: config
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      key,
      shouldFail,
      delayMs,
      versionCode,
      config,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeReleaseModeConfig {
  var rateLimit: Int64
  var rateLimitRefillPeriodMillis: Int64
  var tokenLifeSpanMillis: Int64



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeReleaseModeConfig? {
    let rateLimit = pigeonVar_list[0] as! Int64
    let rateLimitRefillPeriodMillis = pigeonVar_list[1] as! Int64
    let tokenLifeSpanMillis = pigeonVar_list[2] as! Int64

    return BridgeReleaseModeConfig(
      rateLimit: rateLimit,
      rateLimitRefillPeriodMillis: rateLimitRefillPeriodMillis,
      tokenLifeSpanMillis: tokenLifeSpanMillis
    )
  }
  func toList() -> [Any?] {
    return [
      rateLimit,
      rateLimitRefillPeriodMillis,
      tokenLifeSpanMillis,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeMockzillaConfig {
  var port: Int64
  var endpoints: [BridgeEndpointConfig]
  var isRelease: Bool
  var localHostOnly: Bool
  var logLevel: BridgeLogLevel
  var releaseModeConfig: BridgeReleaseModeConfig
  var isNetworkDiscoveryEnabled: Bool



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeMockzillaConfig? {
    let port = pigeonVar_list[0] as! Int64
    let endpoints = pigeonVar_list[1] as! [BridgeEndpointConfig]
    let isRelease = pigeonVar_list[2] as! Bool
    let localHostOnly = pigeonVar_list[3] as! Bool
    let logLevel = pigeonVar_list[4] as! BridgeLogLevel
    let releaseModeConfig = pigeonVar_list[5] as! BridgeReleaseModeConfig
    let isNetworkDiscoveryEnabled = pigeonVar_list[6] as! Bool

    return BridgeMockzillaConfig(
      port: port,
      endpoints: endpoints,
      isRelease: isRelease,
      localHostOnly: localHostOnly,
      logLevel: logLevel,
      releaseModeConfig: releaseModeConfig,
      isNetworkDiscoveryEnabled: isNetworkDiscoveryEnabled
    )
  }
  func toList() -> [Any?] {
    return [
      port,
      endpoints,
      isRelease,
      localHostOnly,
      logLevel,
      releaseModeConfig,
      isNetworkDiscoveryEnabled,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeMockzillaRuntimeParams {
  var config: BridgeMockzillaConfig
  var mockBaseUrl: String
  var apiBaseUrl: String
  var port: Int64



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeMockzillaRuntimeParams? {
    let config = pigeonVar_list[0] as! BridgeMockzillaConfig
    let mockBaseUrl = pigeonVar_list[1] as! String
    let apiBaseUrl = pigeonVar_list[2] as! String
    let port = pigeonVar_list[3] as! Int64

    return BridgeMockzillaRuntimeParams(
      config: config,
      mockBaseUrl: mockBaseUrl,
      apiBaseUrl: apiBaseUrl,
      port: port
    )
  }
  func toList() -> [Any?] {
    return [
      config,
      mockBaseUrl,
      apiBaseUrl,
      port,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BridgeAuthHeader {
  var key: String
  var value: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BridgeAuthHeader? {
    let key = pigeonVar_list[0] as! String
    let value = pigeonVar_list[1] as! String

    return BridgeAuthHeader(
      key: key,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      value,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return BridgeHttpMethod(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return BridgeLogLevel(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return BridgeMockzillaHttpRequest.fromList(self.readValue() as! [Any?])
    case 132:
      return BridgeMockzillaHttpResponse.fromList(self.readValue() as! [Any?])
    case 133:
      return BridgeDashboardOverridePreset.fromList(self.readValue() as! [Any?])
    case 134:
      return BridgeDashboardOptionsConfig.fromList(self.readValue() as! [Any?])
    case 135:
      return BridgeEndpointConfig.fromList(self.readValue() as! [Any?])
    case 136:
      return BridgeReleaseModeConfig.fromList(self.readValue() as! [Any?])
    case 137:
      return BridgeMockzillaConfig.fromList(self.readValue() as! [Any?])
    case 138:
      return BridgeMockzillaRuntimeParams.fromList(self.readValue() as! [Any?])
    case 139:
      return BridgeAuthHeader.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BridgeHttpMethod {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? BridgeLogLevel {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? BridgeMockzillaHttpRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeMockzillaHttpResponse {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeDashboardOverridePreset {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeDashboardOptionsConfig {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeEndpointConfig {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeReleaseModeConfig {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeMockzillaConfig {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeMockzillaRuntimeParams {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? BridgeAuthHeader {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MockzillaHostApi {
  func startServer(config: BridgeMockzillaConfig) throws -> BridgeMockzillaRuntimeParams
  func stopServer() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MockzillaHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `MockzillaHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MockzillaHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startServerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mockzilla_ios.MockzillaHostApi.startServer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startServerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! BridgeMockzillaConfig
        do {
          let result = try api.startServer(config: configArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startServerChannel.setMessageHandler(nil)
    }
    let stopServerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mockzilla_ios.MockzillaHostApi.stopServer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopServerChannel.setMessageHandler { _, reply in
        do {
          try api.stopServer()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopServerChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol MockzillaFlutterApiProtocol {
  func endpointMatcher(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<Bool, PigeonError>) -> Void)
  func defaultHandler(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<BridgeMockzillaHttpResponse, PigeonError>) -> Void)
  func errorHandler(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<BridgeMockzillaHttpResponse, PigeonError>) -> Void)
  func generateAuthHeader(completion: @escaping (Result<BridgeAuthHeader, PigeonError>) -> Void)
  func log(logLevel logLevelArg: BridgeLogLevel, message messageArg: String, tag tagArg: String, exception exceptionArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class MockzillaFlutterApi: MockzillaFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func endpointMatcher(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.endpointMatcher\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg, keyArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
  func defaultHandler(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<BridgeMockzillaHttpResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.defaultHandler\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg, keyArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! BridgeMockzillaHttpResponse
        completion(.success(result))
      }
    }
  }
  func errorHandler(request requestArg: BridgeMockzillaHttpRequest, key keyArg: String, completion: @escaping (Result<BridgeMockzillaHttpResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.errorHandler\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg, keyArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! BridgeMockzillaHttpResponse
        completion(.success(result))
      }
    }
  }
  func generateAuthHeader(completion: @escaping (Result<BridgeAuthHeader, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.generateAuthHeader\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! BridgeAuthHeader
        completion(.success(result))
      }
    }
  }
  func log(logLevel logLevelArg: BridgeLogLevel, message messageArg: String, tag tagArg: String, exception exceptionArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([logLevelArg, messageArg, tagArg, exceptionArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
