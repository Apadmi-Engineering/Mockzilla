// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum BridgeHttpMethod {
  get,
  head,
  post,
  put,
  delete,
  options,
  patch,
}

enum BridgeLogLevel {
  debug,
  error,
  info,
  verbose,
  warn,
  assertion,
}

class BridgeMockzillaHttpRequest {
  BridgeMockzillaHttpRequest({
    required this.uri,
    required this.headers,
    required this.body,
    required this.method,
  });

  String uri;

  Map<String, String> headers;

  String body;

  BridgeHttpMethod method;

  Object encode() {
    return <Object?>[
      uri,
      headers,
      body,
      method,
    ];
  }

  static BridgeMockzillaHttpRequest decode(Object result) {
    result as List<Object?>;
    return BridgeMockzillaHttpRequest(
      uri: result[0]! as String,
      headers: (result[1] as Map<Object?, Object?>?)!.cast<String, String>(),
      body: result[2]! as String,
      method: result[3]! as BridgeHttpMethod,
    );
  }
}

class BridgeMockzillaHttpResponse {
  BridgeMockzillaHttpResponse({
    required this.statusCode,
    required this.headers,
    required this.body,
  });

  int statusCode;

  Map<String, String> headers;

  String body;

  Object encode() {
    return <Object?>[
      statusCode,
      headers,
      body,
    ];
  }

  static BridgeMockzillaHttpResponse decode(Object result) {
    result as List<Object?>;
    return BridgeMockzillaHttpResponse(
      statusCode: result[0]! as int,
      headers: (result[1] as Map<Object?, Object?>?)!.cast<String, String>(),
      body: result[2]! as String,
    );
  }
}

class BridgeDashboardOverridePreset {
  BridgeDashboardOverridePreset({
    required this.name,
    this.description,
    required this.response,
  });

  String name;

  String? description;

  BridgeMockzillaHttpResponse response;

  Object encode() {
    return <Object?>[
      name,
      description,
      response,
    ];
  }

  static BridgeDashboardOverridePreset decode(Object result) {
    result as List<Object?>;
    return BridgeDashboardOverridePreset(
      name: result[0]! as String,
      description: result[1] as String?,
      response: result[2]! as BridgeMockzillaHttpResponse,
    );
  }
}

class BridgeDashboardOptionsConfig {
  BridgeDashboardOptionsConfig({
    required this.successPresets,
    required this.errorPresets,
  });

  List<BridgeDashboardOverridePreset> successPresets;

  List<BridgeDashboardOverridePreset> errorPresets;

  Object encode() {
    return <Object?>[
      successPresets,
      errorPresets,
    ];
  }

  static BridgeDashboardOptionsConfig decode(Object result) {
    result as List<Object?>;
    return BridgeDashboardOptionsConfig(
      successPresets: (result[0] as List<Object?>?)!.cast<BridgeDashboardOverridePreset>(),
      errorPresets: (result[1] as List<Object?>?)!.cast<BridgeDashboardOverridePreset>(),
    );
  }
}

class BridgeEndpointConfig {
  BridgeEndpointConfig({
    required this.name,
    required this.key,
    required this.shouldFail,
    required this.delayMs,
    required this.versionCode,
    required this.config,
  });

  String name;

  String key;

  bool shouldFail;

  int delayMs;

  int versionCode;

  BridgeDashboardOptionsConfig config;

  Object encode() {
    return <Object?>[
      name,
      key,
      shouldFail,
      delayMs,
      versionCode,
      config,
    ];
  }

  static BridgeEndpointConfig decode(Object result) {
    result as List<Object?>;
    return BridgeEndpointConfig(
      name: result[0]! as String,
      key: result[1]! as String,
      shouldFail: result[2]! as bool,
      delayMs: result[3]! as int,
      versionCode: result[4]! as int,
      config: result[5]! as BridgeDashboardOptionsConfig,
    );
  }
}

class BridgeReleaseModeConfig {
  BridgeReleaseModeConfig({
    required this.rateLimit,
    required this.rateLimitRefillPeriodMillis,
    required this.tokenLifeSpanMillis,
  });

  int rateLimit;

  int rateLimitRefillPeriodMillis;

  int tokenLifeSpanMillis;

  Object encode() {
    return <Object?>[
      rateLimit,
      rateLimitRefillPeriodMillis,
      tokenLifeSpanMillis,
    ];
  }

  static BridgeReleaseModeConfig decode(Object result) {
    result as List<Object?>;
    return BridgeReleaseModeConfig(
      rateLimit: result[0]! as int,
      rateLimitRefillPeriodMillis: result[1]! as int,
      tokenLifeSpanMillis: result[2]! as int,
    );
  }
}

class BridgeMockzillaConfig {
  BridgeMockzillaConfig({
    required this.port,
    required this.endpoints,
    required this.isRelease,
    required this.localHostOnly,
    required this.logLevel,
    required this.releaseModeConfig,
    required this.isNetworkDiscoveryEnabled,
  });

  int port;

  List<BridgeEndpointConfig> endpoints;

  bool isRelease;

  bool localHostOnly;

  BridgeLogLevel logLevel;

  BridgeReleaseModeConfig releaseModeConfig;

  bool isNetworkDiscoveryEnabled;

  Object encode() {
    return <Object?>[
      port,
      endpoints,
      isRelease,
      localHostOnly,
      logLevel,
      releaseModeConfig,
      isNetworkDiscoveryEnabled,
    ];
  }

  static BridgeMockzillaConfig decode(Object result) {
    result as List<Object?>;
    return BridgeMockzillaConfig(
      port: result[0]! as int,
      endpoints: (result[1] as List<Object?>?)!.cast<BridgeEndpointConfig>(),
      isRelease: result[2]! as bool,
      localHostOnly: result[3]! as bool,
      logLevel: result[4]! as BridgeLogLevel,
      releaseModeConfig: result[5]! as BridgeReleaseModeConfig,
      isNetworkDiscoveryEnabled: result[6]! as bool,
    );
  }
}

class BridgeMockzillaRuntimeParams {
  BridgeMockzillaRuntimeParams({
    required this.config,
    required this.mockBaseUrl,
    required this.apiBaseUrl,
    required this.port,
  });

  BridgeMockzillaConfig config;

  String mockBaseUrl;

  String apiBaseUrl;

  int port;

  Object encode() {
    return <Object?>[
      config,
      mockBaseUrl,
      apiBaseUrl,
      port,
    ];
  }

  static BridgeMockzillaRuntimeParams decode(Object result) {
    result as List<Object?>;
    return BridgeMockzillaRuntimeParams(
      config: result[0]! as BridgeMockzillaConfig,
      mockBaseUrl: result[1]! as String,
      apiBaseUrl: result[2]! as String,
      port: result[3]! as int,
    );
  }
}

class BridgeAuthHeader {
  BridgeAuthHeader({
    required this.key,
    required this.value,
  });

  String key;

  String value;

  Object encode() {
    return <Object?>[
      key,
      value,
    ];
  }

  static BridgeAuthHeader decode(Object result) {
    result as List<Object?>;
    return BridgeAuthHeader(
      key: result[0]! as String,
      value: result[1]! as String,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is BridgeHttpMethod) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is BridgeLogLevel) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is BridgeMockzillaHttpRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeMockzillaHttpResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeDashboardOverridePreset) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeDashboardOptionsConfig) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeEndpointConfig) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeReleaseModeConfig) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeMockzillaConfig) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeMockzillaRuntimeParams) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is BridgeAuthHeader) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BridgeHttpMethod.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BridgeLogLevel.values[value];
      case 131: 
        return BridgeMockzillaHttpRequest.decode(readValue(buffer)!);
      case 132: 
        return BridgeMockzillaHttpResponse.decode(readValue(buffer)!);
      case 133: 
        return BridgeDashboardOverridePreset.decode(readValue(buffer)!);
      case 134: 
        return BridgeDashboardOptionsConfig.decode(readValue(buffer)!);
      case 135: 
        return BridgeEndpointConfig.decode(readValue(buffer)!);
      case 136: 
        return BridgeReleaseModeConfig.decode(readValue(buffer)!);
      case 137: 
        return BridgeMockzillaConfig.decode(readValue(buffer)!);
      case 138: 
        return BridgeMockzillaRuntimeParams.decode(readValue(buffer)!);
      case 139: 
        return BridgeAuthHeader.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MockzillaHostApi {
  /// Constructor for [MockzillaHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MockzillaHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<BridgeMockzillaRuntimeParams> startServer(BridgeMockzillaConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mockzilla_ios.MockzillaHostApi.startServer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as BridgeMockzillaRuntimeParams?)!;
    }
  }

  Future<void> stopServer() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mockzilla_ios.MockzillaHostApi.stopServer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class MockzillaFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  bool endpointMatcher(BridgeMockzillaHttpRequest request, String key);

  BridgeMockzillaHttpResponse defaultHandler(BridgeMockzillaHttpRequest request, String key);

  BridgeMockzillaHttpResponse errorHandler(BridgeMockzillaHttpRequest request, String key);

  Future<BridgeAuthHeader> generateAuthHeader();

  void log(BridgeLogLevel logLevel, String message, String tag, String? exception);

  static void setUp(MockzillaFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.endpointMatcher$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.endpointMatcher was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BridgeMockzillaHttpRequest? arg_request = (args[0] as BridgeMockzillaHttpRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.endpointMatcher was null, expected non-null BridgeMockzillaHttpRequest.');
          final String? arg_key = (args[1] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.endpointMatcher was null, expected non-null String.');
          try {
            final bool output = api.endpointMatcher(arg_request!, arg_key!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.defaultHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.defaultHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BridgeMockzillaHttpRequest? arg_request = (args[0] as BridgeMockzillaHttpRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.defaultHandler was null, expected non-null BridgeMockzillaHttpRequest.');
          final String? arg_key = (args[1] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.defaultHandler was null, expected non-null String.');
          try {
            final BridgeMockzillaHttpResponse output = api.defaultHandler(arg_request!, arg_key!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.errorHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.errorHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BridgeMockzillaHttpRequest? arg_request = (args[0] as BridgeMockzillaHttpRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.errorHandler was null, expected non-null BridgeMockzillaHttpRequest.');
          final String? arg_key = (args[1] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.errorHandler was null, expected non-null String.');
          try {
            final BridgeMockzillaHttpResponse output = api.errorHandler(arg_request!, arg_key!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.generateAuthHeader$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final BridgeAuthHeader output = await api.generateAuthHeader();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BridgeLogLevel? arg_logLevel = (args[0] as BridgeLogLevel?);
          assert(arg_logLevel != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log was null, expected non-null BridgeLogLevel.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log was null, expected non-null String.');
          final String? arg_tag = (args[2] as String?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.mockzilla_ios.MockzillaFlutterApi.log was null, expected non-null String.');
          final String? arg_exception = (args[3] as String?);
          try {
            api.log(arg_logLevel!, arg_message!, arg_tag!, arg_exception);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
